---
title: "CARRA tutorial to download and plot means from CARRA and ERA5"
format: html
author: "Carlos Peralta"
date: "26 July 2023"
date-modified: last-modified
lang: en
jupyter: python3

---

## Introduction

This document provides examples of how to plot climate means from CARRA.
It also includes a comparison with ERA5 climate means.

```{python}
import numpy as np
import xarray as xr
import matplotlib.path as mpath
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
import cartopy.feature as cfeature
import cdsapi
# Disable warnings for data download via API
import urllib3 
urllib3.disable_warnings()
import os
import warnings
warnings.filterwarnings('ignore')
```

## Downloading the data
Please see the example in [this link](https://cds.climate.copernicus.eu/api-how-to)
for ways to pull the data from CDS, or the notebook [here](https://carlos9917.github.io/metviz/python/carra/carra_quarto_example_west.html).

Once setup, load the API key (the one called CDS_UID) in your local environment.
Set the CDS_API_KEY in your system and export it.

```
export CDS_API_KEY=your_key
```
The API call follows the syntax below


```{python}

URL = 'https://cds.climate.copernicus.eu/api/v2'
KEY = os.getenv("CDS_UID")
c = cdsapi.Client()
DATADIR = './' #path where the data will be downloaded
years = ["2021","2022","2023"]
area_greenland = [85,-75,60,-10]
```

If you don't know what the fields are called, one way
to get the correct names is browsing the catalog in the CDS website. 
For CARRA data, visit [this link](https://cds.climate.copernicus.eu/cdsapp#!/dataset/reanalysis-carra-model-levels?tab=form),
and then click at the bottom of the page where it says "Show API request"
For ERA5 use [this link](https://cds.climate.copernicus.eu/cdsapp#!/dataset/reanalysis-era5-single-levels?tab=form)


Retrieval of ERA5 data. Sample levels
```{python}
out_cds=f'{DATADIR}era5_monthly_t2m_greenland.nc'
if not os.path.isfile(out_cds):
    c.retrieve(
        'reanalysis-era5-single-levels-monthly-means',
        {
            'product_type': 'monthly_averaged_reanalysis',
            'variable': '2m_temperature',
            'year': years,
            'month': [
                '01', '02', '03',
                '04', '05', '06',
                '07', '08', '09',
                '10', '11', '12',
            ],
            'time': '00:00',
            'area': area_greenland,
            'format': 'netcdf',
        },
        out_cds)
else:
    print(f"{out_cds} already downloaded")
```

Checking the contents of the file

```{python}
ds = xr.open_dataset(out_cds)
ds
```

Plot them without the map
```{python}
ds_180 = ds.assign_coords(longitude=(((ds.longitude + 180) % 360) - 180)).sortby('longitude')
# Create Xarray Data Array
da = ds_180['t2m']
# Create Xarray Data Array
da_degc = ds['t2m'] - 273.15
da_degc = da - 273.15
da_degc = da_degc.assign_attrs(da.attrs)
da_degc.attrs['units'] = 'Â° C'
import matplotlib as mpl
cmap = mpl.cm.coolwarm
#cmap = mpl.cm.RdBu_r
levels=np.linspace(-45,45,20)

da_degc[0,0,:,:].plot.contourf(cmap=cmap,levels=levels)
```
Alternatively we can plot it as a continuos field (same effect as using imshow)

```{python}
# or plot the field instead
da_degc[0,0,:,:].plot()
```

The CARRA means are not yet available in CDS, but they should be available by the end of the year. 
Reading here some local data, in this case in grib2 format.

```{python}
fin_carra=os.path.join(DATADIR,"means_gribmean","t2m_mean.grib2")
import pygrib
ds_carra=xr.open_dataset(fin_carra, engine='cfgrib', filter_by_keys={'typeOfLevel': 'heightAboveGround', 'topLevel':2})
ds_carra
```

Plot the data without a projection
```{python}
ds_carra_degc = ds_carra['t2m'] - 273.15
#ds_carra["t2m"].plot() #.imshow(extent=[lons.min(), lons.max(), lats.min(),lats.max()])
ds_carra_degc.plot() #.imshow(extent=[lons.min(), lons.max(), lats.min(),lats.max()])
```

To read the data in an appropriate projection we will define some useful functions below.

```{python}
import copy
import pygrib
import numpy.ma as ma
import datetime
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER

def read_vars(gribfile,params):
    '''
    Reads a file that contains only one time step
    '''
    print("in read_vars")
    ds = {}
    vars = copy.deepcopy(params)
    f = pygrib.open(gribfile)
    was_found=False
    for msg in f:
        for param in vars:
            if vars[param]['param']== str(msg['param']) and vars[param]["level"]==msg["level"] and vars[param]["typeOfLevel"]==msg['typeOfLevel'] and vars[param]["levelType"]==msg["levelType"]:
                print(f'found {vars[param]}')
                vars[param]['msg'] = msg
                was_found=True
        if not was_found:
            #quick check for when it doesnt find anything
            for param in vars:
                print(vars[param]['param'])
                if vars[param]['param']== str(msg['param']):
                    print(f"{param} not found. Printing some info")
                    this_param=msg["param"]
                    this_level=msg["level"]
                    this_tlevel=msg['typeOfLevel']
                    this_ltype=msg["levelType"]
                    print("level :{this_level}")
                    print("typeOfLevel {this_tlevel}")
                    print("levelType {this_ltype}")
                    print("Original params:")
                    print(params)
                    for key in ["param","level","typeOfLevel","levelType"]:
                        new_params = {param:{"param":this_param,"level":this_level,
                                             "typeOfLevel":this_tlevel,"levelType":this_ltype}}
                    print(new_params)
                    sys.exit(0)

    for param in vars:
        msghit = vars[param]['msg']
        nx = msghit['Nx']
        ny = msghit['Ny']
        date = msghit['date']
        hour = msghit['hour']
        fcstep = msghit['step']
        lons = msghit['longitudes'].reshape((ny,nx))
        lats = msghit['latitudes'].reshape((ny,nx))
        lat0 = msghit['LaDInDegrees']
        lon0 = msghit['LoVInDegrees']
        lat1 = msghit['Latin1InDegrees']
        lat2 = msghit['Latin2InDegrees']
        val = ma.masked_values(msghit['values'].reshape((ny,nx)),msghit['missingValue'])
        name = msghit['parameterName']
        vars[param]['field'] = val
        dt = datetime.datetime.strptime(str(date)+str(hour),"%Y%m%d%H")
        lons2 = np.where(lons>180,lons-360,lons)
        lon0 = np.where(lon0>180,lon0-360,lon0)
        proj = ccrs.LambertConformal(central_latitude=lat0,
                                 central_longitude=lon0,
                                 standard_parallels=(lat1, lat2))
        ds['misc'] = {'date':dt,
                      'lons':lons2,
                      'lats':lats,
                      'proj':proj,
                      'fcstep':fcstep}
        ds['params'] = vars

    return ds
```

Read again the data using the function above

```{python}
params = {'t2m':{"param":"167","level":2,"typeOfLevel":"heightAboveGround","levelType":"sfc"}}
fin_carra=os.path.join(DATADIR,"means_gribmean","t2m_mean.grib2")

ds_read = read_vars(fin_carra,params)
proj = ds_read["misc"]["proj"]
print(proj)
```
